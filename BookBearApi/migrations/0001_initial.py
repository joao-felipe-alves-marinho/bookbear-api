# Generated by Django 5.2 on 2025-05-08 23:29

import django.contrib.auth.models
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Author',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('avatar', models.ImageField(blank=True, null=True, upload_to='authors')),
                ('name', models.CharField(max_length=250, unique=True)),
                ('birth_date', models.DateField()),
            ],
        ),
        migrations.CreateModel(
            name='Genre',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=250, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Publisher',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('logo', models.ImageField(blank=True, null=True, upload_to='publishers')),
                ('name', models.CharField(max_length=250, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Book',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=250)),
                ('publication_date', models.DateField()),
                ('synopsis', models.TextField(blank=True)),
                ('score', models.FloatField(default=0.0)),
                ('age_rating', models.CharField(choices=[('E', 'Everyone'), ('T', 'Teen'), ('M', 'Mature'), ('A', 'Adult')], default='E', max_length=2)),
                ('cover', models.ImageField(blank=True, null=True, upload_to='covers')),
                ('authors', models.ManyToManyField(related_name='books', to='BookBearApi.author')),
                ('genres', models.ManyToManyField(related_name='books', to='BookBearApi.genre')),
                ('publisher', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='BookBearApi.publisher')),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('username', models.CharField(max_length=250)),
                ('summary', models.TextField(blank=True)),
                ('birth_date', models.DateField()),
                ('gender', models.CharField(choices=[('X', 'Not specified'), ('MC', 'Male Cisgender'), ('FC', 'Female Cisgender'), ('MT', 'Male Transgender'), ('FT', 'Female Transgender'), ('NB', 'Non-binary'), ('O', 'Other')], default='X', max_length=2)),
                ('avatar', models.ImageField(blank=True, null=True, upload_to='avatars')),
                ('favorite_genres', models.ManyToManyField(blank=True, related_name='users', to='BookBearApi.genre')),
                ('followed_authors', models.ManyToManyField(blank=True, related_name='followers', to='BookBearApi.author')),
                ('followed_publishers', models.ManyToManyField(blank=True, related_name='followers', to='BookBearApi.publisher')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='UserBook',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('situation', models.CharField(choices=[('R', 'Reading'), ('S', 'Stopped'), ('C', 'Completed'), ('P', 'Pending'), ('A', 'Abandoned')], default='P', max_length=2)),
                ('rating', models.FloatField(blank=True, null=True)),
                ('review', models.TextField(blank=True)),
                ('date_added', models.DateField(auto_now_add=True)),
                ('book', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to='BookBearApi.book')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reviewed_books', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('user', 'book')},
            },
        ),
    ]
